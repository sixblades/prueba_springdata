{"version":3,"sources":["../../../../app/scripts/information/competences/assignCompetenceValues.controller.js"],"names":[],"mappings":"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","file":"assignCompetenceValues.controller.js","sourcesContent":["/* jshint -W097 */\n/* globals angular, $, Mentoring*/\n'use strict';\n/*@ngInject*/\nfunction AssignCompetencesValues($rootScope, $filter, $log, $sce, $state, $translate, Principal,\n    PositionService, WageBandService, WeightQuestionService, StatesResource) {\n    \n    var vm = this;\n    var positionsCopy;\n    \n    // Function that inits the values of the controller.\n    vm.initCtrl = () => {\n        if ($state.current.name != 'login') {\n            Principal.identity().then((account) => {\n                if($rootScope.roleRRHH || $rootScope.roleAdmin) {\n                    vm.wageBand = null;\n                    vm.position = null;\n                    \n                    // Obtains the values for the positions combo and wageBands combo.\n                    PositionService.query({}, (result) => {\n                        // Iterate over all the positions to add the description to its name\n                        // We do this instead of using a filter on the combo because this way there is less watchers \n                        // on the page, thus the performance it's better\n                        vm.positions = result.map( (res) => {\n                            let name = $translate.instant(res.description)  + ' - ' + $translate.instant(res.nameKey);\n                            res.name = name;\n                            return res;\n                        })    \n                    });\n                    WageBandService.query({}, (result) => {\n                        // Iterate over all the wageBands to obtain all the wageBands which are not outsourcing and to\n                        // mark the staff wage bands. We do this for the same reason as above.\n                        vm.wageBands = result.filter( (wb) => {\n                            return wb.outsourcing===0;\n                        }).map( (wb) => {\n                            if(wb.business === 0) {\n                                wb.name = wb.name + ' Staff';\n                            }\n                            return wb;\n                        })\n                    });\n                } else {\n                    $log.error('Usuario intentado acceder a un area donde no tiene autorizacion -> ' + $state.current.name);\n                    $state.go('home');\n                }\n            });\n            vm.Modal = {};\n        }\n    };\n    \n    // Handles the value change on the wageBand combo\n    vm.changeWageBandCombo = () => {\n        // First check is there is a copy of all the positions in memory\n        if (Mentoring.isUndefinedOrNull(positionsCopy)) {\n            positionsCopy = angular.copy(vm.positions);\n        }\n        \n        // If no wageBand selected, show all the positions\n        if (Mentoring.isUndefinedOrNull(vm.wageBand)) {\n            vm.positions = angular.copy(positionsCopy);\n        } else {\n            vm.positions = positionsCopy.filter( (pos) => {\n               return pos.wageBandId === vm.wageBand.id;\n            });\n        }\n    };\n    \n    // Handles the value change on the position combo\n    vm.changePositionCombo = () => {\n        if (!Mentoring.isUndefinedOrNull(vm.position)) {\n            // Obtains the values for the weight questions combo\n            if(Mentoring.isUndefinedOrNull(vm.states)) {\n                StatesResource.query({}, (result) => {\n                    vm.states = result;\n                    // Iterate over the states to get its tranlation\n                    vm.states.map((s) => {\n                        let key = 'Estado' + s.id;\n                        s.text = $translate.instant(key);\n                    })\n                    // Once we have the states we could request the weightQuestions\n                    getWeightQuestions();\n                });\n            } else {\n                getWeightQuestions();\n            }\n        }\n    };\n   \n    // Saves the weight question values for a given position\n    vm.saveWeightQuestions = () => {\n        // First of all, make a copy of all questions to recover them later \n        let wqAux = angular.copy(vm.weightQuestions);\n        \n        // Obtains the total sum of the values\n        let totalSum = 0;\n        vm.weightQuestions.map((wq) => {\n           // As we are iterating over the weight questions, we also delete the statedId variable which is \n           // not present on the Java bean.\n           delete wq.stateId;\n           totalSum += wq.value; \n        });\n        \n        // Validate the answers first\n        if( (vm.weightQuestions.length === 25 && totalSum !== 57)\n            || (vm.weightQuestions.length === 18 && totalSum !== 42)) {\n                showModal({msg: 'assign.competences.modal.error.sum',\n                    title: 'assign.competences.modal.error.form.title'});\n                \n                // Finally, recover the question weights\n                vm.weightQuestions = angular.copy(wqAux);\n                return;\n        }\n        \n        // Save the answers\n        WeightQuestionService.saveWeightQuestions(vm.weightQuestions, (result) => {\n            showModal({msg: 'assign.competences.modal.save.ok', \n                    title: 'assign.competences.modal.save.ok.title'});\n        }, (error) => {\n           showModal({msg: 'assign.competences.modal.save.error',\n                    title: 'assign.competences.modal.save.error'});\n        });\n        \n        // Finally, recover the question weights\n        vm.weightQuestions = angular.copy(wqAux);\n    };\n    \n    vm.getQuestionCode= (questionCode) => {\n        vm.codePregunta = questionCode; \n        vm.definicionInfo = $sce.trustAsHtml($translate.instant('evaluation.info.'+questionCode+'.comportamientoInfo'));\n    };\n    \n    var getWeightQuestions = () => {\n        WeightQuestionService.getByPositionId({positionId: vm.position.id}, \n            (result) => {\n                // Iterate over the weight questions to obtain its competence and pillar name\n                let competenceId = 0;\n                let pillarId = 0;\n                let year;\n                result.map((wq) => {\n                    vm.locked = wq.locked === 1 ? true : false;\n                    year = wq.year;\n                    if (competenceId !== wq.question.competence.competenceCode) {\n                        let competenceStr = 'evaluation.' + wq.question.competence.competenceCode;\n                       competenceId =  wq.question.competence.competenceCode;\n                        wq.competence = $filter('translate')(competenceStr);\n                    } \n                    if (pillarId !== wq.question.pillar.pillarCode) {\n                        pillarId = wq.question.pillar.pillarCode;\n                        let pillarStr = 'evaluation.' + wq.question.pillar.pillarCode;\n                        wq.pillar = $filter('translate')(pillarStr);\n                    }\n                    wq.stateId = '' + wq.value;\n                });\n                vm.weightQuestions = result;\n                \n                // Now check, if the year of the position is the same as the current year\n                let now = new Date();\n                vm.sameYear =  year === now.getFullYear();\n            }\n        );\n    }\n    \n    vm.changeState = (wq) => {\n        wq.value = parseInt(wq.stateId);\n    }\n    \n    var showModal = (opts) => {\n        if(Mentoring.isUndefinedOrNull(vm.Modal)) {\n            vm.Modal = {};\n        }\n        vm.Modal.msg = opts.msg;\n        vm.Modal.title = opts.title;\n        vm.Modal.button = opts.button || 'assign.competences.modal.ok',\n        vm.Modal.action = opts.action || (() => {\n            $('#myModal').modal('hide');\n        });\n        $('#myModal').modal('show'); \n    } \n    \n    // Init the controller\n    vm.initCtrl();\n}\n\n// Custom filter to show only specific competences values on the combos\nfunction CustomCompetencesFilter() {\n  return function(items, n, question) {\n        // Array which will contains the filter values\n        let filtered = [];\n        \n        // Iterate over all items to process it\n        items.map((item) => {\n            // Obtains the competence id\n            let compId = question.question.competenceId;\n            // If competence = Etica, show only 4 and 6\n            if (compId === 3) {\n                if (item.id === 4 || item.id === 6) {\n                    filtered.push(item);\n                }\n            // Otherwise, show 1, 3 and 5\n            } else {\n                if (item.id === 1 || item.id === 3 || item.id===5) {\n                    filtered.push(item);\n                }\n            }\n        });\n        // Return the filteres list of values\n        return filtered;\n    }\n};\nangular.module('mentoringApp').controller('AssignCompetencesController', AssignCompetencesValues);\nangular.module('mentoringApp').filter('customCompetencesFilter', CustomCompetencesFilter);"]}