{"version":3,"sources":["../../../../app/scripts/information/CTModel/CTModel.controller.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,SAAS,iBAAiB,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,wBAAwB,EAC3H,2BAA2B,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,eAAe,EACvF,gBAAgB,EAAE,cAAc,EAAE,aAAa,EAAE,WAAW,EAAE,WAAW,EAAE,iBAAiB,EAAE,cAAc,EAAE;;AAE9G,QAAI,EAAE,GAAG,IAAI,CAAC;AACd,cAAU,CAAC,YAAY,GAAG,aAAa,CAAC;;;AAGxC,MAAE,CAAC,QAAQ,GAAG,YAAM;AAChB,YAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE;AACjC,sBAAU,CAAC,YAAY,GAAG,aAAa,CAAC;AACxC,qBAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AACnC,oBAAG,OAAO,IAAI,IAAI,EAAE;AAChB,0BAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;iBACtB;;AAED,oBAAG,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;AAC/C,sBAAE,CAAC,OAAO,GAAG,8CAA8C,CAAC;AAC5D,wBAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACtF,0BAAE,CAAC,MAAM,GAAG,EAAE,CAAC;AACf,0BAAE,CAAC,UAAU,GAAG,EAAE,CAAC;AACnB,0BAAE,CAAC,QAAQ,GAAG,EAAE,CAAC;AACjB,0BAAE,CAAC,kBAAkB,GAAG,EAAE,CAAC;AAC3B,0BAAE,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;;AAG/B,4BAAI,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC,YAAY,IAAI,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,SAAS,EAAE;AACtF,8BAAE,CAAC,cAAc,GAAG,IAAI,CAAC;yBAC5B,MAAM,IAAI,EAAE,CAAC,QAAQ,EAAE;AACpB,8BAAE,CAAC,eAAe,GAAG,IAAI,CAAC;AAC1B,8BAAE,CAAC,mBAAmB,GAAG,wBAAwB,CAAC,KAAK,CAAC;AACpD,wCAAQ,EAAE,OAAO,CAAC,UAAU;6BAC/B,CAAC,CAAC;yBACN;;AAED,4BAAI,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,aAAa,EAAE;AAClC,gCAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,oCAAQ,CAAC,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE,EAC9C,UAAC,MAAM,EAAK;AACR,kCAAE,CAAC,SAAS,GAAG,MAAM,CAAC;6BAC7B,CAAC,CAAC,QAAQ,CAAC,CAAC;;AAEb,oCAAQ,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,EAAE,EAAE,UAAC,MAAM,EAAK;AACvD,kCAAE,CAAC,OAAO,GAAG,MAAM,CAAC;6BACvB,CAAC,CAAC,QAAQ,CAAC,CAAC;;;AAGb,8BAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAM;;AAExB,oCAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE;AACjB,sCAAE,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iCAClC;6BACJ,CAAC,CAAC;yBACN;;AAED,4BAAI,EAAE,CAAC,YAAY,EAAE;AACjB,8BAAE,CAAC,SAAS,GAAG,iBAAiB,CAAC,KAAK,CAAC;AACnC,2CAAW,EAAE,OAAO,CAAC,UAAU;6BAClC,CAAC,CAAC;AACH,8BAAE,CAAC,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC;AAC/B,2CAAW,EAAE,OAAO,CAAC,UAAU;6BAClC,CAAC,CAAC;yBACN;;AAED,4BAAI,EAAE,CAAC,WAAW,EAAE;AAChB,8BAAE,CAAC,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC;AAClC,yCAAS,EAAE,OAAO,CAAC,UAAU;6BAChC,CAAC,CAAC;AACH,8BAAE,CAAC,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC;AAC9B,yCAAS,EAAE,OAAO,CAAC,UAAU;6BAChC,CAAC,CAAC;yBACN;;AAED,4BAAI,EAAE,CAAC,QAAQ,EAAE;AACb,yCAAa,CAAC,KAAK,CAAC,UAAS,OAAO,EAAE;AAClC,kCAAE,CAAC,SAAS,GAAG,OAAO,CAAC;;;AAGvB,2CAAW,CAAC,KAAK,CAAC;AACd,8CAAU,EAAE,OAAO,CAAC,UAAU;iCACjC,EAAE,UAAS,MAAM,EAAE;AAChB,2CAAO,CAAC,OAAO,CAAC,MAAM,EAAE,UAAS,OAAO,EAAE;AACtC,4CAAI,OAAO,CAAC,EAAE,KAAK,OAAO,CAAC,UAAU,EAAE;AACnC,8CAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;yCAC9B;qCACJ,CAAC,CAAC;iCACN,CAAC,CAAC;6BACN,CAAC,CAAC;AACH,uCAAW,CAAC,KAAK,CAAC,UAAS,OAAO,EAAE;AAChC,kCAAE,CAAC,OAAO,GAAG,OAAO,CAAC;6BACxB,CAAC,CAAC;yBACN;qBACJ;;;AAGD,wBAAG,YAAY,CAAC,QAAQ,KAAK,EAAE,IAAI,YAAY,CAAC,UAAU,KAAK,EAAE,EAAE;;AAE/D,0BAAE,CAAC,UAAU,GAAG,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AAClD,0BAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;;;AAG9C,0BAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;qBACzC;iBACJ,MAAM;AACH,wBAAI,CAAC,KAAK,CAAC,qEAAqE,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACxG,0BAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACrB;aACJ,CAAC,CAAC;SACN;KACJ,CAAC;;;AAGF,MAAE,CAAC,mBAAmB,GAAG,UAAC,UAAU,EAAK;;AAErC,YAAI,UAAU,EAAE;;AAEZ,cAAE,CAAC,UAAU,GAAG,UAAU,CAAC;AAC3B,0BAAc,CAAC,eAAe,CAAC,EAAC,UAAU,EAAV,UAAU,EAAC,EAAE,uBAAuB,CAAC,CAAC;;;SAGzE,MAAM,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;AAClD,kBAAE,CAAC,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;;aAEnC,MAAM;AACH,sBAAE,CAAC,SAAS,GAAG,IAAI,CAAC;iBACvB;KACJ,CAAC;;;AAGF,MAAE,CAAC,eAAe,GAAG,UAAC,QAAQ,EAAK;;;AAG/B,UAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;;AAEvB,UAAE,CAAC,cAAc,GAAG,IAAI,CAAC;AACzB,UAAE,CAAC,eAAe,GAAG,IAAI,CAAC;;AAE1B,YAAG,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE;AAC9C,cAAE,CAAC,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;SACjD;;AAED,YAAI,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;AACvC,cAAE,CAAC,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC;SACnC,MAAM;;AAEH,0BAAc,CAAC,oBAAoB,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,EAAE,uBAAuB,CAAC,CAAC;;;AAGnF,6BAAiB,CAAC,KAAK,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,EAAE,UAAC,MAAM,EAAK;AACtD,oBAAI,IAAI,GAAG,EAAE,CAAC;AACd,qBAAI,IAAI,CAAC,GAAC,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1C,wBAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;iBACnC;AACD,kBAAE,CAAC,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,UAAC,GAAG,EAAK;AAC5C,2BAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;iBACpC,CAAC,CAAC;aACN,CAAC,CAAC;SACN;KACJ,CAAC;;;AAGF,MAAE,CAAC,UAAU,GAAG,UAAC,MAAM,EAAK;;AAExB,UAAE,CAAC,WAAW,GAAG,KAAK,CAAC;AACvB,UAAE,CAAC,QAAQ,GAAG,MAAM,CAAC;AACrB,2BAAmB,EAAE,CAAC;;;AAGtB,UAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;AACpB,mBAAO,CAAC,CAAC,QAAQ,CAAC;SACrB,CAAC,CAAC;;AAEH,cAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;;;AAGvB,sBAAc,CAAC,YAAY,CAAC,EAAC,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAC,EAAE,UAAC,MAAM,EAAK;kCAE1F,CAAC,EAAG,CAAC;AACT,oBAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEpB,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,CAAC,EAAK;AACxB,2BAAO,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;iBACpC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;;AAEV,yBAAI,IAAI,CAAC,GAAC,CAAC,EAAC,EAAE,GAAC,EAAE,CAAC,OAAO,CAAC,MAAM,EAAC,CAAC,GAAC,EAAE,EAAE,CAAC,EAAE,EAAE;AACxC,4BAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;AAGxB,4BAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,EAAE;AACxB,6BAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;AACpB,kCAAM;yBACT;qBACJ;iBACJ,CAAC,CAAC;;;;AAhBP,iBAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;sBAA/B,CAAC,EAAG,CAAC;aAiBZ;SACJ,CAAC,CAAC;KACN,CAAC;;;AAGF,MAAE,CAAC,WAAW,GAAG,YAAM;;AAEnB,UAAE,CAAC,WAAW,GAAG,IAAI,CAAC;AACtB,UAAE,CAAC,gBAAgB,GAAG,IAAI,CAAC;AAC3B,UAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;AACpB,mBAAO,CAAC,CAAC,QAAQ,CAAC;SACrB,CAAC,CAAC;AACH,2BAAmB,EAAE,CAAC;;;AAGtB,UAAE,CAAC,QAAQ,GAAG;AACV,sBAAU,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU;SAC1C,CAAC;KACL,CAAC;;;AAGF,MAAE,CAAC,iBAAiB,GAAG,YAAM;;AAEzB,YAAI,MAAM,GAAG,kBAAkB,EAAE,CAAC;AAClC,YAAG,CAAC,MAAM,EAAE;AACR,2BAAe,EAAE,CAAC;AAClB,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,kCAAkC,CAAC;AAClD,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5B,mBAAO;SACV;;AAED,sBAAc,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,MAAM,EAAK;;AAEjD,cAAE,CAAC,gBAAgB,GAAG;AAClB,yBAAS,EAAE,MAAM,CAAC,SAAS;AAC3B,sBAAM,EAAE,MAAM,CAAC,MAAM;AACrB,qBAAK,EAAE,MAAM,CAAC,KAAK;AACnB,uBAAO,EAAE,MAAM,CAAC,OAAO;aAC1B,CAAC;;;AAGF,cAAE,CAAC,gBAAgB,CAAC,SAAS,SAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAClF,cAAE,CAAC,gBAAgB,CAAC,MAAM,SAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5E,cAAE,CAAC,gBAAgB,CAAC,KAAK,SAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;AAG1E,gBAAI,OAAO,GAAG,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC;AAC1C,gBAAI,OAAO,IAAG,CAAC,EAAE;AACb,uBAAO,GAAG,gCAAgC,CAAC;aAC9C,MAAM,IAAI,OAAO,IAAE,CAAC,IAAI,OAAO,IAAE,CAAC,EAAE;AACjC,uBAAO,GAAG,kCAAkC,CAAC;aAChD,MAAM,IAAI,OAAO,IAAE,CAAC,IAAI,OAAO,IAAE,CAAC,EAAE;AACjC,uBAAO,GAAG,8BAA8B,CAAC;aAC5C,MAAM,IAAI,OAAO,IAAE,EAAE,IAAI,OAAO,IAAE,EAAE,EAAE;AACnC,uBAAO,GAAG,kCAAkC,CAAC;aAChD,MAAM;AACH,uBAAO,GAAG,6BAA6B,CAAC;aAC3C;SACJ,EAAE,UAAC,KAAK,EAAK;AACV,2BAAe,EAAE,CAAC;AAClB,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,sCAAsC,CAAC;AACtD,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC/B,CAAC,CAAC;KACN,CAAC;;;AAGF,MAAE,CAAC,YAAY,GAAG,YAAM;;AAEpB,YAAI,MAAM,GAAG,kBAAkB,EAAE,CAAC;AAClC,YAAG,CAAC,MAAM,EAAE;AACR,2BAAe,EAAE,CAAC;AAClB,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,kCAAkC,CAAC;AAClD,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5B,mBAAO;SACV;;;AAGD,sBAAc,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,MAAM,EAAK;AAC7C,2BAAe,EAAE,CAAC;AAClB,cAAE,CAAC,KAAK,CAAC,KAAK,GAAG,oCAAoC,CAAC;AACtD,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,mCAAmC,CAAC;AACnD,cAAE,CAAC,KAAK,CAAC,MAAM,GAAG,YAAM;AACpB,sBAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC,UAAU,EAAC,EAAE,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;aAC/G,CAAC;AACF,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC/B,EACD,UAAC,KAAK,EAAK;AACP,2BAAe,EAAE,CAAC;AAClB,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,iCAAiC,CAAC;AACjD,aAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SACnC,CAAC,CAAC;KACN,CAAC;;;AAGD,QAAI,kBAAkB,GAAG,SAArB,kBAAkB,GAAS;AAC3B,YAAI,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;;;AAG/C,YAAI,KAAK,GAAG,KAAK,CAAC;AAClB,UAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;AACpB,gBAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,GAAG,EAAC;AACvD,iBAAC,CAAC,UAAU,GAAG,gBAAgB,CAAC;AAChC,qBAAK,GAAG,IAAI,CAAC;aAChB,MAAM;AACH,iBAAC,CAAC,UAAU,GAAG,EAAE,CAAC;aACrB;SACJ,CAAC,CAAC;;AAEH,YAAG,KAAK,EAAE;AACN,mBAAO,KAAK,CAAC;SAChB;;;AAGD,UAAE,CAAC,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC;;AAEzB,UAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;AACrB,gBAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AACpB,mBAAO,CAAC,CAAC,KAAK,CAAC;AACf,cAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;AACtB,0BAAU,EAAE;AACV,sBAAE,EAAC,CAAC,CAAC,EAAE;AACP,2BAAO,EAAE;AACL,0BAAE,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE;qBACnB,EAAC;AACJ,qBAAK,EAAL,KAAK;aACP,CAAC,CAAC;SACL,CAAC,CAAC;;AAEH,UAAE,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1C,eAAO,IAAI,CAAC;KACd,CAAC;;;AAGF,QAAI,uBAAuB,GAAG,SAA1B,uBAAuB,CAAI,MAAM,EAAK;AACvC,UAAE,CAAC,SAAS,GAAG,EAAE,CAAC;AAClB,cAAM,CAAC,GAAG,CAAE,UAAC,CAAC,EAAK;AACf,gBAAI,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;AACjG,gBAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;;;AAGzF,gBAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;AACxB,gBAAI,OAAO,IAAG,CAAC,EAAE;AACb,uBAAO,GAAG,gCAAgC,CAAC;aAC9C,MAAM,IAAI,OAAO,IAAE,CAAC,IAAI,OAAO,IAAE,CAAC,EAAE;AACjC,uBAAO,GAAG,kCAAkC,CAAC;aAChD,MAAM,IAAI,OAAO,IAAE,CAAC,IAAI,OAAO,IAAE,CAAC,EAAE;AACjC,uBAAO,GAAG,8BAA8B,CAAC;aAC5C,MAAM,IAAI,OAAO,IAAE,EAAE,IAAI,OAAO,IAAE,EAAE,EAAE;AACnC,uBAAO,GAAG,kCAAkC,CAAC;aAChD,MAAM;AACH,uBAAO,GAAG,6BAA6B,CAAC;aAC3C;;;AAGD,cAAE,CAAC,SAAS,CAAC,IAAI,CAAC;AACd,0BAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS;AACjD,yBAAS,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,EAAP,OAAO;AAC7E,8BAAc,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC;AACzC,2BAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;AACnC,0BAAU,EAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAClC,oBAAI,EAAE,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAR,QAAQ,EAAE,MAAM,EAAN,MAAM;aACpC,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC;;;AAGF,QAAI,mBAAmB,GAAG,SAAtB,mBAAmB,GAAS;;AAE5B,YAAG,EAAE,CAAC,OAAO,KAAK,SAAS,EAAE;AACzB,cAAE,CAAC,OAAO,GAAG,CACT,EAAC,KAAK,EAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAC,EACjE,EAAC,KAAK,EAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,0BAA0B,CAAC,EAAC,EAChE,EAAC,KAAK,EAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,0BAA0B,CAAC,EAAC,CACnE,CAAA;SACJ;;;AAGD,UAAE,CAAC,SAAS,GAAG,EAAE,CAAC;AAClB,UAAE,CAAC,MAAM,GAAG,EAAE,CAAC;;AAEf,YAAI,EAAE,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,0BAAc,CAAC,YAAY,CAAC,EAAE,EAAE,UAAC,MAAM,EAAK;AACxC,kBAAE,CAAC,SAAS,GAAG,MAAM,CAAC;AACtB,sBAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK;AACd,4BAAO,CAAC,CAAC,OAAO,CAAC,EAAE;AACf,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AACzC,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AAC5C,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AAC1C,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AAC3C,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AAC5C,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,AAC1C,6BAAK,CAAC;AAAE,8BAAE,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,AAAC,MAAM;AAAA,qBAC7C;iBACJ,CAAC,CAAC;aACN,CAAC,CAAC;SACN,CAAC;KACL,CAAA;;;AAGD,QAAI,eAAe,GAAG,SAAlB,eAAe,GAAS;AACxB,UAAE,CAAC,KAAK,GAAG;AACP,iBAAK,EAAE,kCAAkC;AACzC,kBAAM,EAAE,yBAAyB;AACjC,kBAAM,EAAE,kBAAM;AACV,iBAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAC/B;SACJ,CAAC;KACL,CAAA;;;AAGD,QAAI,WAAW,GAAG,SAAd,WAAW,CAAI,KAAK,EAAK;AACzB,UAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C,UAAE,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C,UAAE,CAAC,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,UAAE,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD,UAAE,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;AACxD,UAAE,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;;AAEhD,eAAO,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC,YAAY,IAAI,EAAE,CAAC,aAAa,CAAC;KAC/F,CAAA;;;AAGD,QAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,IAAI,EAAK;AACrB,YAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC,EAAE;AACxB,mBAAO,YAAY,CAAC;SACvB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC,EAAE;AAClC,mBAAO,eAAe,CAAC;SAC1B,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAC,CAAC,CAAC,EAAE;AAChC,mBAAO,aAAa,CAAC;SACxB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAC,CAAC,CAAC,EAAE;AACjC,mBAAO,cAAc,CAAC;SACzB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC,EAAE;AAClC,mBAAO,eAAe,CAAC;SAC1B,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAC,CAAC,CAAC,EAAE;AAChC,mBAAO,aAAa,CAAC;SACxB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAC,CAAC,CAAC,EAAE;AAChC,mBAAO,aAAa,CAAC;SACxB;KACJ,CAAA;;;AAGD,MAAE,CAAC,QAAQ,EAAE,CAAC;CACjB,CAAC;AACF,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC","file":"CTModel.controller.js","sourcesContent":["/* jshint -W097 */\n/* globals angular, $, Mentoring*/\n'use strict';\n/*@ngInject*/\nfunction CTModelController($rootScope, $log, $state, $stateParams, $q, $translate, $window, Principal, EvaluationsConsultLeader, \n    EmployeeEvaluableIdResource, EmployeeLeaderResource, EmployeesDIRECTOR, LeadersDIRECTOR, \n    EmployeesGERENTE, LeadersGERENTE, EmployeesRRHH, LeadersRRHH, EmpleadosCn, AllocationsLeader, CTModelService) {\n\n    var vm = this;\n    $rootScope.activeOption = 'information';\n    \n    // Function that inits the values of the controller.\n    vm.initCtrl = () => {\n        if ($state.current.name !== 'login') {\n            $rootScope.activeOption = 'information';\n            Principal.identity().then((account) => {\n                if(account == null) {\n                    $state.go('login');\n                }\n                // If the employee is authorized to see the page...\n                if(handleRoles(account.roles) || account.isLeader) {\n                    vm.linkPDF = 'InfoV&Y/PDFs/COMPONENTES-TEMPERAMENTALES.pdf';\n                    if (!Mentoring.isUndefinedOrNull(account) && !Mentoring.isUndefinedOrNull(account.roles)) {\n                        vm.leader = {};\n                        vm.evaluation = {};\n                        vm.empleado = {};\n                        vm.empleadoLeaderUser = {};\n                        vm.isLeader = account.isLeader;\n                        \n                        // Handle the visibility permissions\n                        if (vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG || vm.roleADMIN) {\n                            vm.isVisibleMando = true;\n                        } else if (vm.roleUSER) {\n                            vm.isVisibleLeader = true;\n                            vm.empleadosLeaderUser = EvaluationsConsultLeader.query({\n                                leaderId: account.employeeId\n                            });\n                        }\n\n                        if (vm.roleADMIN || vm.roleDIRECTORG) {\n                            let promises = [];\n                            promises.push(EmployeeEvaluableIdResource.query({},\n                                (result) => {\n                                    vm.empleados = result;\n                            }).$promise);\n                            \n                            promises.push(EmployeeLeaderResource.query({}, (result) => {\n                                vm.leaders = result;\n                            }).$promise);\n                            \n                            // Once all the request have finished, do the combo selection\n                            $q.all(promises).then(() => {\n                                // If there is a selected employee, only when we come back for consultEvaluation state\n                                if(vm.empleado.info) {\n                                    vm.change(vm.empleado.info.id);\n                                }\n                            });\n                        }\n\n                        if (vm.roleDIRECTOR) {\n                            vm.empleados = EmployeesDIRECTOR.query({\n                                directionId: account.employeeId\n                            });\n                            vm.leaders = LeadersDIRECTOR.query({\n                                directionId: account.employeeId\n                            });\n                        }\n                        \n                        if (vm.roleGERENTE) {\n                            vm.empleados = EmployeesGERENTE.query({\n                                managerId: account.employeeId\n                            });\n                            vm.leaders = LeadersGERENTE.query({\n                                managerId: account.employeeId\n                            });\n                        }\n\n                        if (vm.roleRRHH) {\n                            EmployeesRRHH.query(function(result4) {\n                                vm.empleados = result4;\n                                //busca y recupera el propio usuario para añadirlo a la lista de empleados\n                                //los empleados con rol rrhh no ven a los otros de rrhh y asi puede verse a si mismo\n                                EmpleadosCn.query({\n                                    employeeId: account.employeeId\n                                }, function(result) {\n                                    angular.forEach(result, function(current) {\n                                        if (current.id === account.employeeId) {\n                                            vm.empleados.push(current);\n                                        }\n                                    });\n                                });\n                            });\n                            LeadersRRHH.query(function(result5) {\n                                vm.leaders = result5;\n                            });\n                        }\n                    }\n                    \n                    // Finally, handles the possible state params\n                    if($stateParams.leaderId !== '' && $stateParams.employeeId !== '') {\n                        // Obtains both employee and leader ids from the $state params\n                        vm.employeeId = parseInt($stateParams.employeeId);\n                        vm.leaderId = parseInt($stateParams.leaderId);\n                       \n                        // Load init information from those values\n                        vm.getCTModelsEmployee(vm.employeeId);\n                    }\n                } else {\n                    $log.error('Usuario intentado acceder a un area donde no tiene autorizacion -> ' + $state.current.name);\n                    $state.go('home');\n                }\n            });\n        }\n    };\n    \n    // Handles the change on employees combo.\n    vm.getCTModelsEmployee = (employeeId) => {\n        // If there is an employee selected, obtains the CT Results.\n        if (employeeId) {\n            // Stores the employeeId, we can use it later when reloading the page after a ct result save\n            vm.employeeId = employeeId;\n            CTModelService.getByEmployeeId({employeeId}, handleCTResultsResponse);\n        // If there is no employee selected, first check if there was a leader selected.\n        // In this case do the same as if the user has selected that leader id.\n        } else if (!Mentoring.isUndefinedOrNull(vm.leaderId)) {\n            vm.changeEvaluator(vm.leaderId);\n        // Otherwise, empty the resuts table.\n        } else {\n            vm.CTResults = null;\n        }\n    };\n    \n    // Handles the changes on the evaluator combo\n    vm.changeEvaluator = (leaderId) => {\n        // Stores the selected leader id because we may need it later, in the case that the user selects an empty\n        // option on employees combo.\n        vm.leaderId = leaderId;\n        \n        vm.autoEvaluation = null;\n        vm.finalEvaluation = null;\n        // Check if we have a copy of all the employee combo list before doing nothing\n        if(Mentoring.isUndefinedOrNull(vm.empleadosCopy)) {\n            vm.empleadosCopy = angular.copy(vm.empleados);\n        }\n        // If there is no leaderId selected, the employees combo should be filled with all the employees\n        if (Mentoring.isUndefinedOrNull(leaderId)) {\n            vm.empleados = vm.empleadosCopy;\n        } else {\n            // Obtains leader CT evaluations to be shown in the table\n            CTModelService.getLeaderEvaluations({leaderId: leaderId}, handleCTResultsResponse);\n            \n            // Obtains the leader allocation to handle the employee combo\n            AllocationsLeader.query({leaderId: leaderId}, (result) => {\n                let emps = [];\n                for(let i=0, len = result.length; i<len; i++) {\n                    emps.push(result[i].employeeId);\n                }\n                vm.empleados = vm.empleadosCopy.filter((emp) => {\n                    return emps.indexOf(emp.id) >= 0;\n                });\n            });\n        }\n    };\n    \n    // Handles the click event on a CTResult\n    vm.showResult = (result) => {\n        // Initialize variables\n        vm.newCtResult = false;\n        vm.CTResult = result;\n        prepareShowCTResult();\n        \n        // Delete previous selected rows§\n        vm.CTResults.map((r) => {\n            delete r.selected;\n        });\n        // Select the current row\n        result.selected = true;\n        \n        // Obtains the answers\n        CTModelService.getCTAnswers({employeeId: result.employeeId, answersId: result.answersId}, (result) => {\n            // Iterate over all the answers to obtain its question from vm.Questions\n            for(let r=0,l=result.length; r<l; r++) {\n                let res = result[r];\n                // Iterate over vm.Questions to obtain the question object of the current answer\n                vm.Questions.filter((q) => {\n                   return q.id === res.ctQuestion.id;\n                }).map((q) => {\n                    // Once we have the Question, iterate over vm.Answers to know which label it should have§\n                    for(let a=0,la=vm.Answers.length;a<la; a++) {\n                        let ans = vm.Answers[a];\n                        // If the Answer defind value it's the same as the iterated answer,\n                        // assign Answer label to Question Object\n                        if(ans.value === res.value) {\n                            q.value = ans.label;\n                            break;\n                        }\n                    }\n                });\n            }\n        });\n    };\n    \n    // Handles the neccesary steps to create a new CT Result evaluation.\n    vm.newCTResult = () => {\n        // Flag to mark the CTResult as new.\n        vm.newCtResult = true;\n        vm.ResultEvaluation = null;\n        vm.CTResults.map((r) => {\n            delete r.selected;\n        });\n        prepareShowCTResult();\n        \n        // Creates the object that will hold the CT Result values\n        vm.CTResult = {\n            employeeId: vm.empleado.info.employeeId\n        };\n    };\n    \n    // Calculates the result of a CT Evaluation\n    vm.calculateCTResult = () => {\n        // Calculate the result\n        let result = prepareInputObject();\n        if(!result) {\n            defaultMsgModal();\n            vm.Modal.msg = 'information.ct.modal.error.combo';\n            $('#myModal').modal('show');\n            return;\n        }\n        \n        CTModelService.obtainResult(vm.CTResult, (result) => {\n            // Creates the ResultEvaluation object\n            vm.ResultEvaluation = {\n                principal: result.principal,\n                second: result.second,\n                third: result.third,\n                control: result.control\n            };\n            \n            // Get the styles\n            vm.ResultEvaluation.principal.class = getStyle(vm.ResultEvaluation.principal.key);\n            vm.ResultEvaluation.second.class = getStyle(vm.ResultEvaluation.second.key);\n            vm.ResultEvaluation.third.class = getStyle(vm.ResultEvaluation.third.key);\n            \n            // Calculates Control label\n            let control = vm.ResultEvaluation.control;\n            if (control <=3) {\n                control = 'information.ct.control.muybajo';\n            } else if (control>=4 && control<=6) {\n                control = 'information.ct.control.mediobajo';\n            } else if (control>=7 && control<=9) {\n                control = 'information.ct.control.medio';\n            } else if (control>=10 && control<=13) {\n                control = 'information.ct.control.medioalto';\n            } else {\n                control = 'information.ct.control.alto';\n            }\n        }, (error) => {\n            defaultMsgModal();\n            vm.Modal.msg = 'information.ct.modal.error.calculate';\n            $('#myModal').modal('show');\n        });\n    };\n   \n    // Saves a CT Result\n    vm.saveCTResult = () => {\n        // First, prepare the input object\n        let result = prepareInputObject();\n        if(!result) {\n            defaultMsgModal();\n            vm.Modal.msg = 'information.ct.modal.error.combo';\n            $('#myModal').modal('show');\n            return;\n        }\n        \n        // Finally, dispatch the request\n        CTModelService.saveCTResult(vm.CTResult, (result) => {\n                defaultMsgModal();\n                vm.Modal.title = 'information.ct.modal.success.title';\n                vm.Modal.msg = 'information.ct.modal.success.save';\n                vm.Modal.action = () => {\n                    $state.go($state.current, {leaderId: vm.leaderId, employeeId: vm.employeeId}, {reload: true, notify: true});\n                };\n                $('#myModal').modal('show');\n            },\n            (error) => {\n                defaultMsgModal();\n                vm.Modal.msg = 'information.ct.modal.error.save';\n                $('#myModal').modal('show');\n        });\n    };\n    \n    // Prepares an object ready to be sent to the server\n     var prepareInputObject = () => {\n         let questionsAux = angular.copy(vm.Questions);\n         \n        // Validates the form \n        let error = false;\n        vm.Questions.map((q) => {\n            if(Mentoring.isUndefinedOrNull(q.value) || q.value === '?'){\n                q.styleClass = 'ct-model-error';\n                error = true;\n            } else {\n                q.styleClass = '';\n            }\n        });\n        // If there is a validation error, return false\n        if(error) {\n            return false;\n        }\n        \n        // Otherwise, process the object\n        vm.CTResult.answers = [];\n        // First, adds the answer values to the object\n        vm.Questions.map((q) => {\n           let value = q.value;\n           delete q.value;\n           vm.CTResult.answers.push({\n              ctQuestion: {\n                id:q.id, \n                ctModel: {\n                    id: q.ctModel.id\n                }},\n              value\n           });\n        });\n        \n        vm.Questions = angular.copy(questionsAux);\n        return true;\n     };\n     \n     // Handles a server response containing CTResults.\n     var handleCTResultsResponse = (result) => {\n        vm.CTResults = [];\n        result.map( (r) => {\n            let employee = r.employee.firstSurname + ' ' + r.employee.secondSurname + ', ' + r.employee.name;\n            let leader = r.leader.firstSurname + ' ' + r.leader.secondSurname + ', ' + r.leader.name;\n            \n            // Calculates Control label\n            let control = r.control;\n            if (control <=3) {\n                control = 'information.ct.control.muybajo';\n            } else if (control>=4 && control<=6) {\n                control = 'information.ct.control.mediobajo';\n            } else if (control>=7 && control<=9) {\n                control = 'information.ct.control.medio';\n            } else if (control>=10 && control<=13) {\n                control = 'information.ct.control.medioalto';\n            } else {\n                control = 'information.ct.control.alto';\n            }\n            \n            // Push the result in the results array\n            vm.CTResults.push({\n                employeeId: r.employee.id, answersId: r.answersId,\n                principal: r.principal.key, second: r.second.key, third: r.third.key, control,\n                principalClass: getStyle(r.principal.key),\n                secondClass: getStyle(r.second.key),\n                thirdClass : getStyle(r.third.key),\n                date: r.dateAdd, employee, leader\n            });\n        });\n    };\n     \n    // Prepares the controller for show a CTResult, wheter is a new one or a saved one.\n    var prepareShowCTResult = () => {\n        // Creates the Answers object that will contain the combo options.\n        if(vm.Answers === undefined) {\n            vm.Answers = [\n                {value:2, label: $translate.instant('information.ct.answer.yes')},\n                {value:0, label: $translate.instant('information.ct.answer.no')},\n                {value:1, label: $translate.instant('information.ct.answer.na')},\n            ]\n        }\n        \n        // Obtains the questions\n        vm.Questions = [];\n        vm.Models = {};\n        // If the questions hasn't been obtained before, get them!\n        if (vm.Questions.length === 0) {\n            CTModelService.getQuestions({}, (result) => {\n                vm.Questions = result;\n                result.map((q) => {\n                    switch(q.ctModel.id) {\n                        case 1: vm.Models.red = q.ctModel; break;\n                        case 2: vm.Models.yellow = q.ctModel; break;\n                        case 3: vm.Models.blue = q.ctModel; break;\n                        case 4: vm.Models.green = q.ctModel; break;\n                        case 5: vm.Models.orange = q.ctModel; break;\n                        case 6: vm.Models.pink = q.ctModel; break;\n                        case 7: vm.Models.grey = q.ctModel; break;\n                    }\n                });\n            });\n        };\n    }\n    \n    /* Prepares Model object with default variables */\n    var defaultMsgModal = () => {\n        vm.Modal = {\n            title: 'information.ct.modal.error.title',\n            button: 'information.ct.modal.ok',\n            action: () => {\n                $('#myModal').modal('hide');\n            }\n        };\n    }\n    \n    /* Creates the roles values for the controller and returns if the role is valid for access the page */\n    var handleRoles = (roles) => {\n        vm.roleUSER = roles.indexOf('ROLE_USER') > -1;\n        vm.roleRRHH = roles.indexOf('ROLE_RRHH') > -1;\n        vm.roleGERENTE = roles.indexOf('ROLE_GERENTE') > -1;\n        vm.roleDIRECTOR = roles.indexOf('ROLE_DIRECTOR') > -1;\n        vm.roleDIRECTORG = roles.indexOf('ROLE_DIRECTORG') > -1;\n        vm.roleADMIN = roles.indexOf('ROLE_ADMIN') > -1;\n        \n        return vm.roleADMIN || vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG;\n    }\n    \n    // Returns the correpondant css class for a given component key\n    var getStyle = (item) => {\n        if (item.indexOf('red')>-1) {\n            return 'circle-red';\n        } else if (item.indexOf('yellow')>-1) {\n            return 'circle-yellow';\n        } else if (item.indexOf('blue')>-1) {\n            return 'circle-blue';\n        } else if (item.indexOf('green')>-1) {\n            return 'circle-green';\n        } else if (item.indexOf('orange')>-1) {\n            return 'circle-orange';\n        } else if (item.indexOf('pink')>-1) {\n            return 'circle-pink';\n        } else if (item.indexOf('grey')>-1) {\n            return 'circle-grey';\n        }\n    }\n    \n    /* Inits the controller */\n    vm.initCtrl();\n};\nangular.module('mentoringApp').controller('CTModelController', CTModelController);"]}