{"version":3,"sources":["../../../app/scripts/util/parse-links.service.js"],"names":[],"mappings":";;;AACA,CAAC,YAAY;AACT,gBAAY,CAAC;;AAEb,WAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CACzB,OAAO,CAAC,YAAY,EAAE,YAAY;AAC/B,YAAI,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;AAC3B,gBAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,sBAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACvD;;;AAGD,gBAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC9B,gBAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,mBAAO,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE;AAChC,oBAAI,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,oBAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;AACrB,0BAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;iBACxD;AACD,oBAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;AACpD,oBAAI,WAAW,GAAG,EAAE,CAAC;AACrB,mBAAG,CAAC,OAAO,CACP,IAAI,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EACvC,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAAE,+BAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;iBAAE,CAClD,CAAC;AACN,oBAAI,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;AAC5B,oBAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACxB,wBAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACzB;AACD,oBAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;AACzD,qBAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;aACtB,CAAC,CAAC;;AAEH,mBAAO,KAAK,CAAC;SAChB,CAAC;KACL,CAAC,CAAC;CACV,CAAA,EAAG,CAAC","file":"parse-links.service.js","sourcesContent":["/* global angular */\n(function () {\n    'use strict';\n\n    angular.module('mentoringApp')\n        .service('ParseLinks', function () {\n            this.parse = function (header) {\n                if (header.length === 0) {\n                    throw new Error(\"input must not be of zero length\");\n                }\n\n                // Split parts by comma\n                var parts = header.split(',');\n                var links = {};\n                // Parse each part into a named link\n                angular.forEach(parts, function (p) {\n                    var section = p.split(';');\n                    if (section.length != 2) {\n                        throw new Error(\"section could not be split on ';'\");\n                    }\n                    var url = section[0].replace(/<(.*)>/, '$1').trim();\n                    var queryString = {};\n                    url.replace(\n                        new RegExp(\"([^?=&]+)(=([^&]*))?\", \"g\"),\n                        function ($0, $1, $2, $3) { queryString[$1] = $3; }\n                        );\n                    var page = queryString.page;\n                    if (angular.isString(page)) {\n                        page = parseInt(page);\n                    }\n                    var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                    links[name] = page;\n                });\n\n                return links;\n            };\n        });\n})();"]}