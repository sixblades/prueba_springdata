{"version":3,"sources":["../../../app/scripts/consult/consult.controller.js"],"names":[],"mappings":"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","file":"consult.controller.js","sourcesContent":["/* jshint -W097 */\r\n/* globals angular, $, Mentoring*/\r\n'use strict';\r\n/*@ngInject*/\r\nfunction ConsultController($rootScope, $state, $q, $previousState, $stateParams, Principal, EvaluationsCn, \r\n    EmpleadosCn, EvaluationsAllEmployees, isEvaluationDate, isFinalEvaluationDate, EvaluationYear, \r\n    EvaluationsMandoCn, EvaluationsConsultLeader, EmployeeEvaluationResource, EvaluationEmployeeLeaderResource, \r\n    EmployeeEvaluableIdResource, EmployeeLeaderResource, EmployeesDIRECTOR, LeadersDIRECTOR, EmployeesGERENTE, \r\n    LeadersGERENTE, EmployeesRRHH, LeadersRRHH, SharingEvaluationService, IsModificableService) {\r\n\t\r\n    var vm = this;\r\n    \r\n    var prevState = $previousState.get('consult');\r\n    if ($state.current.name != 'login') {\r\n        Principal.identity().then( (account) => {\r\n            // Activamos la opción de menú Consulta de Evaluación\r\n            $rootScope.activeOption = \"consult\";\r\n            vm.account = account;\r\n            vm.user = {\r\n                firstName: account.firstName,\r\n                lastName: account.lastName\r\n            };\r\n            vm.esModificable = true;\r\n\r\n            if (!Mentoring.isUndefinedOrNull(account) && !Mentoring.isUndefinedOrNull(account.roles)) {\r\n                vm.leader = {};\r\n                vm.evaluation = {};\r\n                vm.empleado = {};\r\n                vm.empleadoLeaderUser = {};\r\n                vm.isLeader = account.isLeader;\r\n                vm.roleUSER = account.roles.indexOf('ROLE_USER') > -1;\r\n                vm.roleRRHH = account.roles.indexOf('ROLE_RRHH') > -1;\r\n                vm.roleGERENTE = account.roles.indexOf('ROLE_GERENTE') > -1;\r\n                vm.roleDIRECTOR = account.roles.indexOf('ROLE_DIRECTOR') > -1;\r\n                vm.roleDIRECTORG = account.roles.indexOf('ROLE_DIRECTORG') > -1;\r\n                vm.roleADMIN = account.roles.indexOf('ROLE_ADMIN') > -1;\r\n                \r\n                isEvaluationDate.get(function(isDate) {\r\n                   vm.isEvaluationDate = isDate.value;\r\n                });\r\n                isFinalEvaluationDate.get(function(isDate) {\r\n                    vm.isFinalEvaluationDate = isDate.value;\r\n                });\r\n                \r\n\t\t\t\t// Obtains the evaluation's period year\r\n\t\t\t\tEvaluationYear.get((res) => {\r\n                    vm.evaluationYear = res.value;\r\n                });\r\n\r\n                vm.isVisibleEvaluator = !(vm.roleGERENTE || vm.roleDIRECTOR);\r\n\r\n                if (vm.isLeader || vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG || vm.roleADMIN) {\r\n                    if (vm.isLeader && !(vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG || vm.roleADMIN)) {\r\n                        vm.isVisibleLeader = false;\r\n                    } else {\r\n                        vm.isVisibleLeader = true;\r\n                    }\r\n                    vm.isVisible = true;\r\n                } else {\r\n                    vm.isVisible = false;\r\n                    vm.isVisibleLeader = false;\r\n                }\r\n\r\n                if (vm.roleUSER && !(vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG || vm.roleADMIN)) {\r\n                    if (vm.isLeader === 0) {\r\n                        vm.evaluations = EvaluationsAllEmployees.query({\r\n                            employeeId: account.employeeId\r\n                        });\r\n                    } else {\r\n                        vm.empleadosLeaderUser = EvaluationsConsultLeader.query({\r\n                            leaderId: account.employeeId\r\n                        }, (result) => {\r\n                            \r\n                            // Once we have the users, check if there is a previously selected employee\r\n                            if(prevState && prevState.params.empleado) {                                \r\n                                // Obtains the employee from the list of employees\r\n                                let employeeLeader = result.filter( (ev) => {\r\n                                    if(ev.employeeId === prevState.params.empleado) {\r\n                                        return ev;\r\n                                    } \r\n                                });\r\n                                if (employeeLeader.length>0) {\r\n                                    vm.empleadoLeaderUser.info = employeeLeader[0];\r\n                                }\r\n                                // If no employee has been found, it's because the leader has selected its own evaluation\r\n                                // so we call the combo's change value method anyway\r\n                                vm.changeLeaderUser();\r\n                                return;\r\n                            } \r\n                            // If there is no previous employee, obtains all \r\n                            vm.evaluations = EvaluationsAllEmployees.query({\r\n                                employeeId: account.employeeId\r\n                            });\r\n                        });\r\n                    }\r\n                    vm.esModificable = false;\r\n                }\r\n\r\n                if (vm.roleADMIN || vm.roleDIRECTORG) {\r\n                    let promises = [];\r\n                    promises.push(EmployeeEvaluableIdResource.query({},\r\n                         (result) => {\r\n                             vm.empleados = result;\r\n                            // Once we have the users, check if there is a previously selected employee\r\n                            if(prevState && prevState.params.empleado) {\r\n                                // Obtains the employee from the list of employees\r\n                                let employee = result.filter( (ev) => {\r\n                                    if(ev.id === prevState.params.empleado) {\r\n                                        return ev;\r\n                                    } \r\n                                });\r\n                                // Set the employee as the combo value\r\n                                if (employee.length>0) {\r\n                                    vm.empleado.info = employee[0];\r\n                                }\r\n                            } \r\n                    }).$promise);\r\n                    promises.push(EmployeeLeaderResource.query({}, (result) => {\r\n                        vm.leaders = result;\r\n                        // Once we have the users, check if there is a previously selected employee\r\n                        if(prevState && prevState.params.leader) {\r\n                            // Obtains the employee from the list of employees\r\n                            let employee = result.filter( (ev) => {\r\n                                if(ev.id === prevState.params.leader.id) {\r\n                                    return ev;\r\n                                } \r\n                            });\r\n                            // Set the employee as the combo value\r\n                            if (employee.length>0) {\r\n                                vm.leader.info = employee[0];\r\n                            }\r\n                        } \r\n                    }).$promise);\r\n                    \r\n                    // Once all the request have finished, do the combo selection\r\n                    $q.all(promises).then(() => {\r\n                        // If there is a selected employee, only when we come back for consultEvaluation state\r\n                        if(vm.empleado.info) {\r\n                            vm.change(vm.empleado.info.id);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (vm.roleDIRECTOR) {\r\n                    vm.empleados = EmployeesDIRECTOR.query({\r\n                        directionId: account.employeeId\r\n                    });\r\n                    vm.leaders = LeadersDIRECTOR.query({\r\n                        directionId: account.employeeId\r\n                    });\r\n                    vm.esModificable = false;\r\n                }\r\n                \r\n                if (vm.roleGERENTE) {\r\n                    vm.empleados = EmployeesGERENTE.query({ managerId: account.employeeId\r\n                    }, (result) => {\r\n                        // Once we have the users, check if there is a previously selected employee\r\n                        if(prevState && prevState.params.empleado) {\r\n                            // Obtains the employee from the list of employees\r\n                            let employee = result.filter( (ev) => {\r\n                                if(ev.id === prevState.params.empleado) {\r\n                                    return ev;\r\n                                } \r\n                            });\r\n                            // Set the employee as the combo value\r\n                            if (employee.length>0) {\r\n                                vm.empleado.info = employee[0];\r\n                            }\r\n                        } \r\n                    });\r\n                    vm.leaders = LeadersGERENTE.query({\r\n                        managerId: account.employeeId\r\n                    });\r\n                    \r\n                    // Now checks if there is a previously selected employee and search for its evaluations\r\n                    if (prevState && prevState.params !== undefined) {\r\n                        vm.change(prevState.params.empleado);\r\n                    }\r\n                    vm.esModificable = false;\r\n                }\r\n\r\n                if (vm.roleRRHH) {\r\n                    EmployeesRRHH.query((result) => {\r\n                        //busca y recupera el propio usuario para añadirlo a la lista de empleados\r\n                        //los empleados con rol rrhh no ven a los otros de rrhh y asi puede verse a si mismo\r\n                        result.splice(0, 0, {\r\n                            id: vm.account.employeeId,\r\n                            employeeId: vm.account.employeeId,\r\n                            firstSurname: vm.account.lastName,\r\n                            name: vm.account.firstName\r\n                        });\r\n                        vm.empleados = result;\r\n                    });\r\n                    LeadersRRHH.query(function(result5) {\r\n                        vm.leaders = result5;\r\n                    });\r\n                }\r\n                $previousState.forget('consult');\r\n            }\r\n            if ($state.current.name !== 'login') {\r\n                vm.isAuthenticated = Principal.isAuthenticated();\r\n            }\r\n        });\r\n    }\r\n    \r\n    vm.showEvaluatorInput = (evaluacion) => {\r\n        let showInput = true;\r\n        // Leaders, HR, Managers, Directors and Admin can see this input.\r\n        if (vm.isLeader || vm.roleRRHH || vm.roleGERENTE || vm.roleDIRECTOR || vm.roleDIRECTORG || vm.roleADMIN) {\r\n            showInput = true;\r\n        }\r\n        // Only case when the user cant see the input is when the user is the evaluated employee.\r\n        if(evaluacion.employeeId == vm.account.employeeId) {\r\n            showInput = false;\r\n        }\r\n        return showInput;\r\n    }\r\n    \r\n    vm.isEvaluador = (evaluacion) => {\r\n        return evaluacion.leaderId == vm.account.employeeId;\r\n    };\r\n    \r\n    vm.modificable = (evaluacion) => {\r\n        return IsModificableService.modificable(vm.account, evaluacion, vm.evaluationYear, vm.isEvaluationDate, vm.isFinalEvaluationDate, vm.roleRRHH, vm.roleDIRECTORG, vm.roleADMIN);\r\n    };\r\n                \r\n    vm.mostrarEvaluacion = (evaluacion) => {\r\n        SharingEvaluationService.setId(evaluacion.id);\r\n        SharingEvaluationService.setModification(vm.modificable(evaluacion));\r\n        SharingEvaluationService.setEvaluado(evaluacion);\r\n        $stateParams.empleado = evaluacion.employeeId;\r\n        $stateParams.leader = vm.leader.info;\r\n        $stateParams.evaluation = evaluacion;\r\n        $stateParams.showInput = vm.showEvaluatorInput(evaluacion);\r\n        $state.go('consultEvaluation');\r\n    };\r\n    \r\n    vm.changeLeaderUser = function(idEmpleado) {\r\n        if (Mentoring.isUndefinedOrNull(vm.empleadoLeaderUser.info)) {\r\n            EvaluationsAllEmployees.query({\r\n                employeeId: vm.account.employeeId\r\n            }, (evaluaciones) => {\r\n                vm.evaluations = evaluaciones;\r\n            });\r\n        } else {\r\n            EmployeeEvaluationResource.query({\r\n                employeeId: vm.empleadoLeaderUser.info.employeeId\r\n            }, (evaluaciones) => {\r\n                vm.evaluations = evaluaciones;\r\n            });\r\n        }\r\n    };\r\n    \r\n    vm.change = (dato1) => {\r\n        if (Mentoring.isUndefinedOrNull(dato1)) {\r\n            if (Mentoring.isUndefinedOrNull(vm.leader.info) || Mentoring.isUndefinedOrNull(vm.leader.info.id)) {\r\n                vm.evaluations = [];\r\n            } else {\r\n                vm.evaluations = EvaluationsMandoCn.query({\r\n                    leaderId: vm.leader.info.id\r\n                });\r\n            }\r\n        } else {\r\n            if (Mentoring.isUndefinedOrNull(vm.leader.info) || Mentoring.isUndefinedOrNull(vm.leader.info.id)) {\r\n                vm.evaluations = EmployeeEvaluationResource.query({\r\n                    employeeId: dato1\r\n                });\r\n            } else {\r\n                vm.evaluations = EvaluationEmployeeLeaderResource.query({\r\n                    employeeId: dato1,\r\n                    leaderId: vm.leader.info.id\r\n                });\r\n            }\r\n        }\r\n    };\r\n               \r\n    vm.changeMando = (dato2) => {\r\n        vm.dato2 = dato2;\r\n        if (Mentoring.isUndefinedOrNull(dato2)) {\r\n            if (Mentoring.isUndefinedOrNull(vm.empleado.info) || Mentoring.isUndefinedOrNull(vm.empleado.info.id)) {\r\n                vm.evaluations = [];\r\n            } else {\r\n                vm.evaluations = EmployeeEvaluationResource.query({\r\n                    employeeId: vm.empleado.info.id\r\n                });\r\n            }\r\n        } else {\r\n            if (Mentoring.isUndefinedOrNull(vm.empleado.info) || Mentoring.isUndefinedOrNull(vm.empleado.info.id)) {\r\n                vm.evaluations = EvaluationsMandoCn.query({\r\n                    leaderId: dato2\r\n                });\r\n            } else {\r\n                vm.evaluations = EvaluationEmployeeLeaderResource.query({\r\n                    employeeId: vm.empleado.info.id,\r\n                    leaderId: dato2\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\nangular.module('mentoringApp').controller('ConsultController', ConsultController);"]}