{"version":3,"sources":["../../../app/scripts/increments/individual.controller.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,SAAS,oBAAoB,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,uBAAuB,EAAE,UAAU,EAAE,OAAO,EACpH,wBAAwB,EAAE,WAAW,EAAE,iBAAiB,EAAE,SAAS,EAAE,0BAA0B,EAAE,aAAa,EAAE,WAAW,EAAC;AAC/H,QAAI,EAAE,GAAG,IAAI,CAAC;AACX,MAAE,CAAC,QAAQ,GAAG,KAAK,CAAC;AACvB,cAAU,CAAC,YAAY,GAAG,YAAY,CAAC;;;AAGvC,aAAS,CAAC,KAAK,CAAC,EAAE,EAAE,UAAC,MAAM,EAAK;AAC/B,UAAE,CAAC,SAAS,GAAG,MAAM,CAAC;KACtB,CAAC,CAAC;;;AAGA,MAAE,CAAC,SAAS,GAAG;AACX,cAAM,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;AAClB,gBAAQ,EAAE,CAAC;AACP,iBAAK,EAAE,QAAQ;AACf,qBAAS,EAAE,eAAe,EAAE,WAAW,EAAE,KAAK;AAC9C,sBAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,eAAe;AAC9D,8BAAkB,EAAE,eAAe,EAAE,oBAAoB,EAAE,eAAe;AAC1E,gBAAI,EAAE,CAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC;SAC5B,EAAC;AACE,iBAAK,EAAE,OAAO;AACd,qBAAS,EAAE,eAAe,EAAE,WAAW,EAAE,OAAO;AAChD,sBAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,eAAe;AAC9D,8BAAkB,EAAE,eAAe,EAAE,oBAAoB,EAAE,eAAe;AAC1E,gBAAI,EAAE,CAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC;SAC5B,EAAE;AACC,iBAAK,EAAE,QAAQ;AACf,qBAAS,EAAE,eAAe,EAAE,WAAW,EAAE,OAAO;AAChD,sBAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,eAAe;AAC9D,8BAAkB,EAAE,eAAe,EAAE,oBAAoB,EAAE,eAAe;AAC1E,gBAAI,EAAE,CAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC;SAC5B,EAAE;AACC,iBAAK,EAAE,SAAS;AAChB,qBAAS,EAAE,eAAe,EAAE,WAAW,EAAE,eAAe;AACxD,sBAAU,EAAE,MAAM,EAAE,gBAAgB,EAAE,MAAM;AAC5C,8BAAkB,EAAE,MAAM,EAAE,oBAAoB,EAAE,MAAM;AACxD,gBAAI,EAAE,CAAC,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;SACpB,CACA;KACJ,CAAC;;AAEF,MAAE,CAAC,YAAY,GAAI;AACf,kBAAU,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK;AACrC,0BAAkB,EAAG,IAAI,EAAE,kBAAkB,EAAG,iBAAiB,EAAE,kBAAkB,EAAG,CAAC;AACzF,mBAAW,EAAG,IAAI,EAAE,kBAAkB,EAAG,GAAG;AAC5C,gBAAQ,EAAG,IAAI,EAAE,cAAc,EAAG,CAAC;AACnC,2BAAmB,EAAG,CAAC,EAAE,uBAAuB,EAAG,EAAE;AACrD,qBAAa,EAAG,KAAK,EAAE,kBAAkB,EAAG,CAAC,EAAE,WAAW,EAAG,IAAI;AACjE,sBAAc,EAAG,oJAAoJ;KACxK,CAAC;;;AAIL,MAAE,CAAC,mBAAmB,GAAG,YAAK;;AAEvB,UAAE,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC1B,YAAG,EAAE,CAAC,UAAU,KAAK,EAAE,EAAE;AACxB,6BAAiB,CAAC,KAAK,CAAC,EAAC,UAAU,EAAC,EAAE,CAAC,UAAU,EAAC,EAAE,UAAC,MAAM,EAAK;AAC/D,kBAAE,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,UAAC,IAAI,EAAK;AACzC,2BAAO,IAAI,CAAC,WAAW,KAAI,IAAI,CAAC;iBAChC,CAAC,CAAC,GAAG,CAAC,UAAC,WAAW,EAAK;AACvB,wBAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC1C,2BAAO,EAAC,EAAE,EAAE,WAAW,CAAC,WAAW,CAAC,EAAE,EAAE,UAAU,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAA;iBACrG,CAAC,CAAC;AACH,kBAAE,CAAC,WAAW,GAAG,EAAE,CAAC;aACpB,CAAC,CAAC;SACH,MAAM;AACN,cAAE,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAC7B;KACD,CAAC;;;AAIF,MAAE,CAAC,gBAAgB,GAAG,YAAM;AAC3B,YAAG,EAAE,CAAC,WAAW,KAAK,EAAE,EAAE;;AAEhB,cAAE,CAAC,QAAQ,GAAG,KAAK,CAAC;;;AAG7B,uBAAW,CAAC,GAAG,CAAC,EAAC,aAAa,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,EAAC,EAAE,UAAC,MAAM,EAAK;AAC/D,kBAAE,CAAC,eAAe,GAAG,MAAM,CAAC;AAC5B,kBAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,EAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,EAAE,CAAC,eAAe,CAAC,mBAAmB,CAAC;;;AAGzG,2BAAW,CAAC,eAAe,CAAC,EAAC,UAAU,EAAE,EAAE,CAAC,UAAU;AAC1B,8BAAU,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU;AACrC,wBAAI,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,EAAC,EAClD,UAAC,MAAM,EAAK;;AAER,sBAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;;AAEnB,sBAAE,CAAC,YAAY,GAAG,MAAM,CAAC;;AAEzB,wBAAG,MAAM,CAAC,cAAc,KAAK,IAAI,EAAE;AAC/B,8BAAM,CAAC,cAAc,GAAG;AACpB,oCAAQ,EAAE,CAAC,EAAE,QAAQ,EAAC,CAAC,EAAE,QAAQ,EAAC,CAAC;yBACtC,CAAA;qBACJ;AACD,wBAAI,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;AACzC,wBAAI,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;AACzC,wBAAI,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;AACzC,wBAAI,MAAM,GAAG,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC;;;;AAIlD,wBAAG,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AAClD,0BAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD,0BAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AACnD,0BAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AACnD,0BAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;qBACtD;;;AAGD,wBAAI,OAAO,GAAG,IAAI,CAAC;AACnB,wBAAG,MAAM,IAAI,CAAC,GAAG,GAAC,GAAG,CAAA,GAAE,CAAC,EAAE;AACtB,+BAAO,GAAG,IAAI,CAAC;qBAClB,MAAM,IAAG,MAAM,IAAI,GAAG,EAAE;AACrB,+BAAO,GAAG,IAAI,CAAC;qBAClB,MAAM,IAAI,MAAM,IAAI,CAAC,GAAG,GAAC,GAAG,CAAA,GAAE,CAAC,EAAE;AAC9B,+BAAO,GAAG,IAAI,CAAC;qBAClB;AACD,sBAAE,CAAC,CAAC,GAAG;AACH,8BAAM,EAAE,OAAO;AACf,2BAAG,EAAG,sBAAsB,GAAG,OAAO;qBACzC,CAAC;;;AAGF,wBAAI,eAAe,GAAG,GAAG,CAAC;;AAE1B,wBAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;AACzD,4BAAO,EAAE,CAAC,YAAY,CAAC,cAAc;AACjC,6BAAK,GAAG;AAAE,2CAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,AAC9C,6BAAK,GAAG;AAAE,2CAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,AAC9C,6BAAK,GAAG;AAAE,2CAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,AAC9C,6BAAK,IAAI;AAAE,2CAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,AAC/C,6BAAK,KAAK;AAAE,2CAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,AAAC,MAAM;AAAA,qBACnD;AACD,sBAAE,CAAC,eAAe,GAAG,CAAC,eAAe,GAAG,EAAE,CAAC,YAAY,CAAC,eAAe,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACpF,sBAAE,CAAC,aAAa,GAAG,CAAC,AAAC,EAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,EAAE,CAAC,eAAe,GAAE,GAAG,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAChG,sBAAE,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,eAAe,CAAC,iBAAiB,IAAI,CAAC,GAAI,EAAE,CAAC,eAAe,GAAC,GAAG,CAAC,CAAC,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACvG,sBAAE,CAAC,oBAAoB,GAAG,CAAC,eAAe,GAAG,EAAE,CAAC,YAAY,CAAC,eAAe,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACzF,sBAAE,CAAC,kBAAkB,GAAG,CAAC,AAAC,EAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,EAAE,CAAC,oBAAoB,GAAE,GAAG,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC;;;AAG1G,wBAAI,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC;AACrD,sBAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,GAAG,QAAQ,CAAC;AACjH,sBAAE,CAAC,eAAe,CAAC,mBAAmB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,QAAQ,CAAC;AACrH,sBAAE,CAAC,eAAe,CAAC,iBAAiB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,GAAG,QAAQ,CAAC;;;AAGjH,sBAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;AAC9C,sBAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;AAC9C,sBAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;AAC9C,sBAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;iBAChE,EACD,UAAC,KAAK,EAAK;AACP,wBAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,mCAAmC,CAAC;AAChE,sBAAE,CAAC,KAAK,GAAG;AACP,2BAAG,EAAH,GAAG;AACH,6BAAK,EAAE,yCAAyC;AAChD,8BAAM,EAAE,gCAAgC;AACxC,8BAAM,EAAE,kBAAM;AACV,6BAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;yBAC/B;qBACJ,CAAC;;AAEF,qBAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBAC/B,CAAC,CAAC;aACf,CAAC,CAAC;SACH,MAAM;AACN,cAAE,CAAC,WAAW,GAAG,IAAI,CAAC;SACtB;KACD,CAAA;;;AAGE,MAAE,CAAC,cAAc,GAAG,YAAM;;AAEtB,gCAAwB,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;AAC7D,gCAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAChD,gCAAwB,CAAC,WAAW,CAAC;AACjC,sBAAU,EAAE,EAAE,CAAC,UAAU;AACzB,cAAE,EAAE,EAAE,CAAC,YAAY,CAAC,YAAY;AACtC,wBAAY,EAAE,EAAE,CAAC,YAAY,CAAC,sBAAsB;SACjD,CAAC,CAAA;;;AAGF,YAAI,YAAY,GAAG,EAAE,CAAC;;AAEtB,oBAAY,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAC,EAAE,EAAE,EAAE,CAAC,UAAU,EAAC,EAAE,UAAC,GAAG,EAAK;AACxE,cAAE,CAAC,YAAY,GAAG,GAAG,CAAC;SACzB,CAAC,CAAC,QAAQ,CAAC,CAAC;AACb,oBAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAClD,EAAC,UAAU,EAAE,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,YAAY,EAAC,EAAE,UAAC,GAAG,EAAK;AACtF,cAAE,CAAC,cAAc,GAAG,GAAG,CAAC;SAC3B,CAAC,CAAC,QAAQ,CAAC,CAAC;;;;;AAKb,+BAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC3C,oBAAY,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;;;AAGxC,UAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAM;AAC5B,wBAAY,CAAC,QAAQ,GAAG,EAAC,IAAI,EAAE,EAAE,CAAC,YAAY,EAAC,CAAC;AAChD,wBAAY,CAAC,MAAM,GAAG,EAAE,CAAC;AACzB,wBAAY,CAAC,UAAU,GAAG,EAAE,CAAC,cAAc,CAAC;AAC5C,kBAAM,CAAC,EAAE,CAAC,mBAAmB,EAAC,EAAE,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;SACvD,CAAC,CAAA;KACL,CAAA;CACH;AACF,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC","file":"individual.controller.js","sourcesContent":["/* jshint -W097 */\n/* Controller for Individual Matrix funcionality */\n'use strict';\n/*@ngInject*/\nfunction IndividualController($rootScope, $scope, $state, $stateParams, $q, $translatePartialLoader, $translate, $filter,\n    SharingEvaluationService, EmpleadosCn, EmployeesCategory, Employees, EmployeeEvaluationResource, EvaluationsCn, Retribution){\n\tvar vm = this;\n    vm.showInfo = false;\n\t$rootScope.activeOption = 'increments';\n    \n    /* Obtains the employee list */\n\tEmployees.query({}, (result) => {\n\t\tvm.employees = result;\n\t});\n\n    // Chart.js Data\n    vm.ChartConf = {\n        labels: [\"\",\"\",\"\"],\n        datasets: [{\n            label: 'Maximo',\n            fillColor: 'rgba(0,0,0,0)', strokeColor: 'red',\n            pointColor: 'rgba(0,0,0,0)', pointStrokeColor: 'rgba(0,0,0,0)',\n            pointHighlightFill: 'rgba(0,0,0,0)', pointHighlightStroke: 'rgba(0,0,0,0)',\n            data: [30000,30000,30000]\n        },{\n            label: 'Media',\n            fillColor: 'rgba(0,0,0,0)', strokeColor: 'green',\n            pointColor: 'rgba(0,0,0,0)', pointStrokeColor: 'rgba(0,0,0,0)',\n            pointHighlightFill: 'rgba(0,0,0,0)', pointHighlightStroke: 'rgba(0,0,0,0)',\n            data: [25000,25000,25000]\n        }, {\n            label: 'Minimo',\n            fillColor: 'rgba(0,0,0,0)', strokeColor: 'black',\n            pointColor: 'rgba(0,0,0,0)', pointStrokeColor: 'rgba(0,0,0,0)',\n            pointHighlightFill: 'rgba(0,0,0,0)', pointHighlightStroke: 'rgba(0,0,0,0)',\n            data: [20000,20000,20000]\n        }, {\n            label: 'Salario',\n            fillColor: 'rgba(0,0,0,0)', strokeColor: 'rgba(0,0,0,0)',\n            pointColor: 'blue', pointStrokeColor: 'blue',\n            pointHighlightFill: 'blue', pointHighlightStroke: 'blue',\n            data: [0,23000,0]\n        }\n        ]\n    };\n    // Chart.js Options\n    vm.ChartOptions =  {\n        responsive: true, showTooltips: false,\n        scaleShowGridLines : true, scaleGridLineColor : \"rgba(0,0,0,.05)\", scaleGridLineWidth : 1,\n        bezierCurve : true, bezierCurveTension : 0.4,\n        pointDot : true, pointDotRadius : 3,\n        pointDotStrokeWidth : 1, pointHitDetectionRadius : 20,\n        datasetStroke : false, datasetStrokeWidth : 2, datasetFill : true,\n        legendTemplate : '<ul class=\"tc-chart-js-legend\"><% for (var i=0; i<datasets.length; i++){%><%if(datasets[i].label){%><li><%=datasets[i].label%></li><%}%><%}%></ul>'\n    };\n\n\n\t/** Obtains the employee categories when an employee is selected on the combo. */\n\tvm.changeEmployeeCombo = () =>{\n        /* Hides the info divs while loading */\n        vm.showInfo = false;\n\t\tif(vm.employeeId !== '') {\n\t\t\tEmployeesCategory.query({employeeId:vm.employeeId}, (result) => {\n\t\t\t\tvm.retributions = result.filter((item) => {\n\t\t\t\t\treturn item.retribution!== null;\n\t\t\t\t}).map((retribution) => {\n\t\t\t\t\tvar date = new Date(retribution.dateFrom);\n\t\t\t\t\treturn {id: retribution.retribution.id, positionId: retribution.positionId, year: date.getFullYear()}\n\t\t\t\t});\n\t\t\t\tvm.retribution = '';\n\t\t\t});\n\t\t} else {\n\t\t\tvm.employeeCategories = null;\n\t\t}\n\t};\n\n\n\t/** Obtains the retribution for a given year */\n\tvm.changeYearsCombo = () => {\n\t\tif(vm.retribution !== '') {\n            /* Hides the info divs while loading */\n            vm.showInfo = false;\n            \n            /* Retribution info request */\n\t\t\tRetribution.get({retributionId: vm.retribution.id}, (result) => {\n\t\t\t\tvm.retributionInfo = result;\n\t\t\t\tvm.retributionInfo.annualTotalIncome = vm.retributionInfo.annualGrossIncome + vm.retributionInfo.annualSocialProfits;\n\n                /* Employee info request. WageBand, Area, Job... */\n                Retribution.getEmployeeInfo({employeeId: vm.employeeId,\n                                            categoryId: vm.retribution.positionId,\n                                            year: vm.retribution.year},\n                    (result) => {\n                        /* Hows the info div */\n                        vm.showInfo = true;\n                        \n                        vm.employeeInfo = result;\n                        /* In case there are no wage band limits... */\n                        if(result.wageBandLimits === null) {\n                            result.wageBandLimits = {\n                                minValue: 0, medValue:0, maxValue:0\n                            }\n                        }\n                        var min = result.wageBandLimits.minValue;\n                        var avg = result.wageBandLimits.medValue;\n                        var max = result.wageBandLimits.maxValue;\n                        var salary = vm.retributionInfo.annualGrossIncome;\n                        \n                        /* Checks if there are position increases info */\n                        /* Otherwise, default values */\n                        if(vm.employeeInfo.positionIncreases.P1.length === 0) {\n                            vm.employeeInfo.positionIncreases.P1 = [0, 0, 0, 0 ,0];\n                            vm.employeeInfo.positionIncreases.P2 = [0,0,0,0,0];\n                            vm.employeeInfo.positionIncreases.P3 = [0,0,0,0,0];\n                            vm.employeeInfo.positionIncreases.P4 = [0,0,0,0,0];\n                        }\n                        \n                        // Calculate current P\n                        var actualP = 'P4';\n                        if(salary <= (min+avg)/2) {\n                            actualP = 'P1';\n                        } else if(salary <= avg) {\n                            actualP = 'P2';\n                        } else if (salary <= (max+avg)/2) {\n                            actualP = 'P3';\n                        }\n                        vm.P = {\n                            actual: actualP,\n                            msg : 'increments.position.' + actualP\n                        };\n                        \n                        /* Calculate Salary Increases */\n                        let percentIncrease = 0.0;\n                        /* Obtains current P values for the correpondent P percent */\n                        let PValues = vm.employeeInfo.positionIncreases[actualP];\n                        switch(vm.employeeInfo.evaluationMark) {\n                            case 'F': percentIncrease = PValues[0]; break;\n                            case 'B': percentIncrease = PValues[1]; break;\n                            case 'A': percentIncrease = PValues[2]; break;\n                            case 'A+': percentIncrease = PValues[3]; break;\n                            case 'A++': percentIncrease = PValues[4]; break;\n                        }\n                        vm.percentIncrease = (percentIncrease + vm.employeeInfo.generalIncrease).toFixed(1);\n                        vm.totalIncrease = ((vm.retributionInfo.annualGrossIncome * vm.percentIncrease)/100).toFixed(2);\n                        vm.newGrossIncome = (vm.retributionInfo.annualGrossIncome * (1 + (vm.percentIncrease/100))).toFixed(2);\n                        vm.fixedPercentIncrease = (percentIncrease + vm.employeeInfo.generalIncrease).toFixed(1);\n                        vm.fixedTotalIncrease = ((vm.retributionInfo.annualGrossIncome * vm.fixedPercentIncrease)/100).toFixed(2);\n                        \n                        // Format the numeric values to show on the first table\n                        let currency = ' ' + vm.retributionInfo.currencyName;\n                        vm.retributionInfo.annualGrossIncome = $filter('NumericFilter')(vm.retributionInfo.annualGrossIncome) + currency;\n                        vm.retributionInfo.annualSocialProfits = $filter('NumericFilter')(vm.retributionInfo.annualSocialProfits) + currency;\n                        vm.retributionInfo.annualTotalIncome = $filter('NumericFilter')(vm.retributionInfo.annualTotalIncome) + currency;\n                        \n                        // Update Chart info\n                        vm.ChartConf.datasets[0].data = [min,min,min];\n                        vm.ChartConf.datasets[1].data = [avg,avg,avg];\n                        vm.ChartConf.datasets[2].data = [max,max,max];\n                        vm.ChartConf.datasets[3].data = [salary, salary, salary];\n                },\n                (error) => {\n                    let msg = error.data.msg || 'increments.individual.modal.error';\n                    vm.Modal = {\n                        msg,\n                        title: 'increments.individual.modal.error.title',\n                        button: 'increments.individual.modal.ok',\n                        action: () => {\n                            $('#myModal').modal('hide');\n                        }\n                    };\n                    /* Now show the modal */\n                    $('#myModal').modal('show');\n                });\n\t\t\t});\n\t\t} else {\n\t\t\tvm.retribution = null;\n\t\t}\n\t}\n    \n    /* Redirects to the current evaluation page */\n    vm.goToEvaluation = () => {\n        /* Set some info needed before going to consultEvaluation state */\n        SharingEvaluationService.setId(vm.employeeInfo.evaluationId);\n        SharingEvaluationService.setModification(false);\n        SharingEvaluationService.setEvaluado({\n            employeeId: vm.employeeId,\n            id: vm.employeeInfo.evaluationId, \n\t\t    creationDate: vm.employeeInfo.evaluationCreationDate\n        })\n        \n        /* Obtains info needed to go to the evaluation state */\n        let promiseArray = [];\n        /* Add to the promiseArray all the request to server */\n        promiseArray.push(EmpleadosCn.getEmployeeInfo({id: vm.employeeId}, (emp) => {\n            vm.employeeData = emp;\n        }).$promise);\n        promiseArray.push(EmployeeEvaluationResource.getEvaluation(\n                {employeeId: vm.employeeId, evaluationId: vm.employeeInfo.evaluationId}, (eva) => {\n            vm.evaluationData = eva;\n        }).$promise);\n        \n        /* Loads the json i18n files for consult */\n        /* There are props loaded by consult state, which is before going to consultEvaluation.\n        Since we are going directly to consultEvaluation, we need to load these props, just in case we were there before */\n        $translatePartialLoader.addPart('consult');\n        promiseArray.push($translate.refresh());                \n       \n        /* When all the requests are finished, then go to consultEvaluation state */\n        $q.all(promiseArray).then(() => {\n            $stateParams.empleado = {info: vm.employeeData};\n            $stateParams.leader = [];\n            $stateParams.evaluation = vm.evaluationData;\n            $state.go('consultEvaluation',{}, {location: true});\n        })\n    }\n }\nangular.module('mentoringApp').controller('IndividualController', IndividualController);\n"]}