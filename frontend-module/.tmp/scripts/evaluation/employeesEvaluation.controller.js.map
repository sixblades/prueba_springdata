{"version":3,"sources":["../../../app/scripts/evaluation/employeesEvaluation.controller.js"],"names":[],"mappings":"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","file":"employeesEvaluation.controller.js","sourcesContent":["/* jshint -W097 */\n/* globals angular, $, Mentoring*/\n'use strict';\n/*@ngInject*/\nfunction EmployeesEvaluationsController($rootScope, $state, $translate, Principal, Directions, Areas, EmployeesEvaluationService) {\n    var vm = this;\n    $rootScope.activeOption = 'consult';\n    \n    vm.onNgInit = () => {\n        if ($state.current.name != 'login') {\n            // Check if the user is authenticated before doing anything\n            Principal.identity().then(() => {\n                if(!Principal.isAuthenticated) {\n                    $state.go('login');\n                }\n                // Obtains all the directions\n                Directions.query({}, (res) => {\n                    vm.directions = res;\n                }, (err) =>{\n                    showModal(() => {\n                        $state.go('home');\n                    });\n                });\n                \n                // Creates the year array. The first year will always be 2015.\n                let firstYear = 2015;\n                let date = new Date();\n                vm.years = [];\n                while(firstYear<=date.getFullYear()) {\n                    vm.years.push(firstYear);\n                    firstYear++;\n                }\n            }, \n            // If not authenticated, forward to login page\n            (err) => {\n                $state.go('login');      \n            });\n        } \n    };\n    \n    // Handles the changes on direction combo\n    vm.changeDirection = () => {\n        vm.showTable = false;\n        // First check if it's not an empty value\n        if(!Mentoring.isUndefinedOrNull(vm.direction)) {\n            // Then, obtain the direction's areas\n            Areas.getDirectionAreas({directionId: vm.direction}, (res) => {\n                vm.areas = res;\n            }, (err) =>{\n                showModal(() => {\n                    $('#myModal').modal('hide');\n                });\n            });\n        }\n    }\n    \n    // Handles the changes on years combo\n    vm.changeYear = () => {\n        vm.showTable = false;\n        if(!Mentoring.isUndefinedOrNull(vm.year) && !Mentoring.isUndefinedOrNull(vm.area)) {\n            // Dispatch server request\n            getResults();\n        }\n    };\n    \n    // Handles the changes on area combo\n    vm.changeArea = () => {\n        vm.showTable = false;\n        // First check if it's not an empty value\n        if(!Mentoring.isUndefinedOrNull(vm.area)) {\n            // If there is no year selected, autoselect current year\n            if(Mentoring.isUndefinedOrNull(vm.year)) {\n                let date = new Date();\n                vm.year = date.getFullYear();\n            }\n            // Dispatch the server request\n            getResults();\n        }\n    };\n    \n    // Dispatch server request to obtain the data\n    var getResults = () => {\n        EmployeesEvaluationService.get({areaId:vm.area, year: vm.year}, (res)=> {\n            vm.showTable = true;\n            res.map(processResults);\n            vm.evaluations = res; \n        }, (err) => {\n            showModal(() => {\n                $('#myModal').modal('hide');\n            });\n        });\n    }\n    \n    // Handles the visualization of the controller Modal\n    var showModal = (action) => {\n        vm.Modal = {\n            msg: 'employeesEvaluation.modal.error',\n            title: 'employeesEvaluation.modal.error.title',\n            button: 'employeesEvaluation.modal.ok',\n            action: action\n        };\n        $('#myModal').modal('show');\n    }\n    \n    // Handles each result of the server request. This function do some process on each result before they are shown\n    // to the user\n    var processResults = (r) => {\n        // First, obtain the emplyee's full name\n        let employee = r.employee;\n        r.employee.name = employee.firstSurname + ' ' + employee.secondSurname + ', ' + employee.name;\n        \n        // Obtains the self evaluation label text and its class\n        let selfEvalKey = 'employeesEvaluation.tabla.';\n        if(r.selfEvaluation) {\n            selfEvalKey += 'si';\n            r.selfEvaluationClass = 'circle-green';\n        } else {\n            selfEvalKey += 'no';\n            r.selfEvaluationClass = 'circle-red';\n        }\n        r.selfEvaluation = $translate.instant(selfEvalKey);\n        \n        // Same for final evaluation\n        let finalEvalKey = 'employeesEvaluation.tabla.';\n        if(r.finalEvaluation) {\n            finalEvalKey += 'si';\n            r.finalEvaluationClass = 'circle-green';\n        } else {\n            finalEvalKey += 'no';\n            r.finalEvaluationClass = 'circle-red';\n        }\n        r.finalEvaluation = $translate.instant(finalEvalKey);\n    }\n    \n    vm.onNgInit();\n};\nangular.module('mentoringApp').controller('EmployeesEvaluationsController', EmployeesEvaluationsController);"]}