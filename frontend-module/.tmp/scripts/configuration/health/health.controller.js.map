{"version":3,"sources":["../../../../app/scripts/configuration/health/health.controller.js"],"names":[],"mappings":"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","file":"health.controller.js","sourcesContent":["/* jshint -W097 */\n/* globals angular, $, Mentoring*/\n'use strict';\n/*@ngInject*/\nfunction HealthController($rootScope, HealthService) {\n    var vm = this;\n    \n    // Activamos la opción de menú Configuración\n    $rootScope.activeOption = \"configuration\";\n\n    vm.updatingHealth = true;\n    vm.separator = '.';\n\n    vm.refresh = function () {\n        vm.updatingHealth = true;\n        HealthService.checkHealth().then(function (response) {\n            vm.healthData = vm.transformHealthData(response);\n            vm.updatingHealth = false;\n        }, function (response) {\n            vm.healthData = vm.transformHealthData(response.data);\n            vm.updatingHealth = false;\n        });\n    };\n\n    vm.refresh();\n\n    vm.getLabelClass = function (statusState) {\n        if (statusState === 'UP') {\n            return 'label-success';\n        } else {\n            return 'label-danger';\n        }\n    };\n\n    vm.transformHealthData = function (data) {\n        var response = [];\n        vm.flattenHealthData(response, null, data);\n        return response;\n    };\n\n    vm.flattenHealthData = function (result, path, data) {\n        angular.forEach(data, function (value, key) {\n            if (vm.isHealthObject(value)) {\n                if (vm.hasSubSystem(value)) {\n                    vm.addHealthObject(result, false, value, vm.getModuleName(path, key));\n                    vm.flattenHealthData(result, vm.getModuleName(path, key), value);\n                } else {\n                    vm.addHealthObject(result, true, value, vm.getModuleName(path, key));\n                }\n            }\n        });\n        return result;\n    };\n\n    vm.getModuleName = function (path, name) {\n        var result;\n        if (path && name) {\n            result = path + vm.separator + name;\n        } else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    };\n\n\n    vm.showHealth = function (health) {\n        vm.currentHealth = health;\n        $('#showHealthModal').modal('show');\n    };\n\n    vm.addHealthObject = function (result, isLeaf, healthObject, name) {\n\n        var healthData = {\n            'name': name\n        };\n        var details = {};\n        var hasDetails = false;\n\n        angular.forEach(healthObject, function (value, key) {\n            if (key === 'status' || key === 'error') {\n                healthData[key] = value;\n            } else {\n                if (!vm.isHealthObject(value)) {\n                    details[key] = value;\n                    hasDetails = true;\n                }\n            }\n        });\n\n        // Add the of the details\n        if (hasDetails) {\n            angular.extend(healthData, { 'details': details });\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    };\n\n    vm.hasSubSystem = function (healthObject) {\n        var result = false;\n        angular.forEach(healthObject, function (value) {\n            if (value && value.status) {\n                result = true;\n            }\n        });\n        return result;\n    };\n\n    vm.isHealthObject = function (healthObject) {\n        var result = false;\n        angular.forEach(healthObject, function (value, key) {\n            if (key === 'status') {\n                result = true;\n            }\n        });\n        return result;\n    };\n\n    vm.baseName = function (name) {\n        if (name) {\n            var split = name.split('.');\n            return split[0];\n        }\n    };\n\n    vm.subSystemName = function (name) {\n        if (name) {\n            var split = name.split('.');\n            split.splice(0, 1);\n            var remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    };\n}\nangular.module('mentoringApp').controller('HealthController', HealthController);"]}