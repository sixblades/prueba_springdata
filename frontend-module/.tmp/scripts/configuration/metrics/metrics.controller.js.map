{"version":3,"sources":["../../../../app/scripts/configuration/metrics/metrics.controller.js"],"names":[],"mappings":"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","file":"metrics.controller.js","sourcesContent":["/* jshint -W097 */\n/* globals angular, $, Mentoring*/\n'use strict';\n/*@ngInject*/\nfunction MetricsController($rootScope, $scope, HealthService) {\n    var vm = this;\n    \n    // Activamos la opción de menú Configuración\n    $rootScope.activeOption = \"configuration\";\n\n    vm.metrics = {};\n    vm.updatingMetrics = true;\n\n    vm.refresh = function () {\n        vm.updatingMetrics = true;\n        HealthService.getMetrics().then(function (promise) {\n            vm.metrics = promise;\n            vm.updatingMetrics = false;\n        }, function (promise) {\n            vm.metrics = promise.data;\n            vm.updatingMetrics = false;\n        });\n    };\n\n    $scope.$watch('metrics', function (newValue) {\n        vm.servicesStats = {};\n        vm.cachesStats = {};\n        angular.forEach(newValue.timers, function (value, key) {\n            if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                vm.servicesStats[key] = value;\n            }\n\n            if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                // remove gets or puts\n                var index = key.lastIndexOf('.');\n                var newKey = key.substr(0, index);\n\n                // Keep the name of the domain\n                index = newKey.lastIndexOf('.');\n                vm.cachesStats[newKey] = {\n                    'name': newKey.substr(index + 1),\n                    'value': value\n                };\n            }\n        });\n    });\n\n    vm.refresh();\n\n    vm.refreshThreadDumpData = function () {\n        HealthService.threadDump().then(function (data) {\n            vm.threadDump = data;\n\n            vm.threadDumpRunnable = 0;\n            vm.threadDumpWaiting = 0;\n            vm.threadDumpTimedWaiting = 0;\n            vm.threadDumpBlocked = 0;\n\n            angular.forEach(data, function (value) {\n                if (value.threadState === 'RUNNABLE') {\n                    vm.threadDumpRunnable += 1;\n                } else if (value.threadState === 'WAITING') {\n                    vm.threadDumpWaiting += 1;\n                } else if (value.threadState === 'TIMED_WAITING') {\n                    vm.threadDumpTimedWaiting += 1;\n                } else if (value.threadState === 'BLOCKED') {\n                    vm.threadDumpBlocked += 1;\n                }\n            });\n\n            vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        });\n    };\n\n    vm.getLabelClass = function (threadState) {\n        if (threadState === 'RUNNABLE') {\n            return 'label-success';\n        } else if (threadState === 'WAITING') {\n            return 'label-info';\n        } else if (threadState === 'TIMED_WAITING') {\n            return 'label-warning';\n        } else if (threadState === 'BLOCKED') {\n            return 'label-danger';\n        }\n    };\n}\nangular.module('mentoringApp').controller('MetricsController', MetricsController);"]}